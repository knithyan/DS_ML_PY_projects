## Using Neural Network to indicate whether a Bank Note was Authentic


## We'll use the Bank Authentication Data Set from the UCI repository.

##The data consists of 5 columns:

## variance of Wavelet Transformed image (continuous)
## skewness of Wavelet Transformed image (continuous)
## curtosis of Wavelet Transformed image (continuous)
## entropy of image (continuous)
## class (integer) Where class indicates whether or not a Bank Note was authentic.


## Import Libraries and Data
import pandas as pd
import seaborn as sns
%matplotlib inline

data = pd.read_csv('bank_note_data.csv')
data.head()

## Create a Countplot of the Classes (Authentic 1 vs Fake 0) 
sns.countplot(x='Class',data=data)

## Create a PairPlot of the Data with Seaborn, set Hue to Class
sns.pairplot(data,hue='Class')


## STANDARDIZE DATA

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(data.drop('Class',axis=1))

scaled_features = scaler.fit_transform(data.drop('Class',axis=1))

df_feat = pd.DataFrame(scaled_features,columns=data.columns[:-1])
df_feat.head()

## Train Test Split

X = df_feat
y = data['Class']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

## TENSORFLOW

import tensorflow as tf

##Create a list of feature column objects using tf.feature.numeric_column() 
df_feat.columns
image_var = tf.feature_column.numeric_column("Image.Var")
image_skew = tf.feature_column.numeric_column('Image.Skew')
image_curt = tf.feature_column.numeric_column('Image.Curt')
entropy =tf.feature_column.numeric_column('Entropy')

feat_cols = [image_var,image_skew,image_curt,entropy]

##  Create an object called classifier which is a DNNClassifier from learn. Set it to have 2 classes and a [10,20,10] hidden unit layer structure
classifier = tf.estimator.DNNClassifier(hidden_units=[10, 20, 10], n_classes=2,feature_columns=feat_cols)
input_func = tf.estimator.inputs.pandas_input_fn(x=X_train,y=y_train,batch_size=20,shuffle=True)
classifier.train(input_fn=input_func,steps=500)

pred_fn = tf.estimator.inputs.pandas_input_fn(x=X_test,batch_size=len(X_test),shuffle=False)

note_predictions = list(classifier.predict(input_fn=pred_fn))

note_predictions[0]

final_preds  = []
for pred in note_predictions:
    final_preds.append(pred['class_ids'][0])

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,final_preds))

print(classification_report(y_test,final_preds))


## Compare to Random Forest

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators=200)

rfc.fit(X_train,y_train)

rfc_preds = rfc.predict(X_test)

print(classification_report(y_test,rfc_preds))

print(confusion_matrix(y_test,rfc_preds))


